name: CI Pipeline

# Trigger the workflow on push or pull requests to the main branch
on:
  push:
    branches:
      - main
      - 71-ci
  pull_request:
    branches:
      - main

# Define the jobs for the workflow #TODO: FIX increase tests coverage
jobs:
  # # Job to install dependencies and run tests with coverage
  # test:
  #   runs-on: ubuntu-latest  # Use the latest Ubuntu environment

  #   steps:
  #     # Check out the code from the repository
  #     - uses: actions/checkout@v3

  #     # Set up Python environment 
  #     - name: Set up Python 3.9
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9

  #     # Install dependencies from requirements.txt
  #     - name: Install dependencies
  #       run: |
  #         sudo apt update
  #         sudo apt install r-base -y
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt

  #     # Run tests with coverage
  #     - name: Run tests with coverage
  #       run: |
  #         pip install pytest pytest-cov
  #         pytest --cov=app

  #     # Upload code coverage to Codecov
  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v3
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}  # Set Codecov token in GitHub Secrets

  # # Job to run linter (flake8 and black) #TODO: Fix link errors
  # lint:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3

  #     # Set up Python environment
  #     - name: Set up Python 3.9
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9

  #     # Install linting tools (flake8, black)
  #     - name: Install linters
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install flake8 black

  #     # Run flake8 for linting
  #     - name: Run flake8 linter
  #       run: flake8 app.py app_test.py

  #     # Run Black for formatting checks
  #     - name: Run black (check only)
  #       run: black --check app.py app_test.py

  # # Job to perform security checks (Bandit, Safety) #TODO: FIX security checks
  # security-check:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3

  #     # Set up Python environment 
  #     - name: Set up Python 3.9
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9

  #     # Install security tools (Bandit, Safety)
  #     - name: Install security tools
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install bandit safety

  #     # Run Bandit for security checks on Python code
  #     - name: Run Bandit security check
  #       run: bandit -r .  # Recursive scan of the repository

  #     # Run Safety to check for known vulnerabilities in dependencies
  #     - name: Run Safety security check
  #       run: safety check --full-report

  # Build job
  build:
    runs-on: ubuntu-latest
    # needs: [test, security-check]
    steps:
      # Checkout the repository and submodules
      - uses: actions/checkout@v4
        with:
          token: "${{ secrets.ACCESS_TOKEN }}"
          submodules: recursive  # Ensure submodules are checked out

      # Pull and update submodules
      - name: Update Submodules
        run: |
          git submodule update --init --recursive
          cp -r patches/* ./models/

      # Get the next semantic version using `PaulHatch/semantic-version`
      - name: Get next version
        id: version
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          minor_pattern: "^feat"  # Bump minor version if commit starts with 'feat'
          patch_pattern: "^fix"   # Bump patch version if commit starts with 'fix'
          default: patch          # Default bump if no match (patch)
          
      # Build the project with Docker using the next version tag
      - name: Build Docker Image
        run: |
          IMAGE_TAG=${{ steps.version.outputs.version }}
          echo "Building Docker image with tag: $IMAGE_TAG"
          docker build -t alternative.cr.de-fra.ionos.com/ai-ml-api:${IMAGE_TAG} -t alternative.cr.de-fra.ionos.com/ai-ml-api:latest .

      # Log in to IONOS Container Registry
      - name: Log in to IONOS Container Registry
        run: |
          echo "${{ secrets.IONOS_CONTAINER_REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.IONOS_CONTAINER_REGISTRY_USERNAME }}" alternative.cr.de-fra.ionos.com --password-stdin

      # Push the Docker image to the IONOS Container Registry
      - name: Push Docker Image to IONOS Container Registry
        run: |
          IMAGE_TAG=${{ steps.version.outputs.version }}
          docker push alternative.cr.de-fra.ionos.com/ai-ml-api:latest
          docker push alternative.cr.de-fra.ionos.com/ai-ml-api:${IMAGE_TAG}
