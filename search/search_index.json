{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI/ML API Server","text":"<p>Welcome to the documentation for the AI/ML API Server. This server a part of the ALTERNATIVE project, providing a robust and secure interface for accessing a wide range of machine learning models. Our goal is to simplify the integration of ML models into various applications and workflows, ensuring seamless access and efficient operation.</p>"},{"location":"#overview","title":"Overview","text":"<p>The AI/ML API Server is engineered to support high-demand scenarios, offering a unified interface for machine learning models developed by consortium partners. It ensures seamless integration, secure access, and efficient operation, catering to a variety of use cases from predictive analytics to real-time data processing.</p>"},{"location":"#key-objectives","title":"Key Objectives","text":"<ul> <li>Seamless Integration: Simplify the incorporation of ML models into existing applications and workflows.</li> <li>Secure API Access: Implement state-of-the-art security measures for data protection and access control.</li> <li>Scalable Architecture: Dynamically adjust resources to handle varying loads, ensuring consistent performance.</li> <li>High Availability: Design for fault tolerance and resilience to minimize downtime.</li> <li>Comprehensive Documentation: Provide detailed guides and examples to facilitate easy adoption.</li> <li>User-Friendly Interfaces: Offer intuitive tools for managing API tokens and accessing model functionalities.</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Diverse Model Support: Access a wide range of ML models for different domains and applications.</li> <li>Token-Based Authentication: Secure API endpoints with robust token authentication mechanisms.</li> <li>Scalable Deployment: Leverage Docker and Kubernetes for scalable and manageable deployments.</li> <li>Performance Monitoring: Integrated tools for tracking API performance and usage statistics.</li> <li>Interactive Documentation: Explore API functionalities with interactive Swagger documentation.</li> </ul>"},{"location":"deployment/","title":"Deployment Process","text":""},{"location":"deployment/#production-deployment","title":"Production Deployment:","text":"<p>For the production deployment, we use Kubernetes to manage the deployment of the AI/ML API server and its associated components. The deployment process involves the following steps:</p>"},{"location":"deployment/#aiml-api-server-deployment","title":"AI/ML API Server Deployment:","text":"<ol> <li>Build Docker Image</li> <li>Push Image to Registry</li> <li>Update Deployment Files</li> <li>Apply Deployment</li> </ol> <p>In the project README, we provide detailed instructions for each step of the deployment process, including the commands to execute.</p>"},{"location":"deployment/#custom-envoy-filter-deployment","title":"Custom Envoy Filter Deployment:","text":"<ol> <li>Apply the SQL Schema</li> <li>Build the Filter</li> <li>Create PVC</li> <li>Add volume and volume mount to the sidecar container</li> <li>Copy the filter binary to the volume</li> <li>Update the Envoy Filter manifest configuration</li> <li>Apply the Envoy Filter manifest</li> </ol>"},{"location":"repositories/","title":"Repositories","text":"Repository Description Link AI/ML API Core REST API component with Flask application logic GitHub Envoy Filter Custom Filter Go implementation of token-based authentication and authorization GitHub Keycloak AI/ML Access Tokens Plugin Keycloak extension for managing AI/ML API access tokens GitHub CKAN Platform Modified CKAN platform with token management features GitHub Keycloak Authorization Plugin Keycloak plugin for managing user roles and permissions GitHub Infrastructure as Code Terraform configurations for cloud infrastructure setup GitHub ML Model Deployments Kubernetes configurations for deploying ML models GitHub API Documentation OpenAPI specifications and additional documentation GitHub"},{"location":"scalability/","title":"Scalability","text":"<p>To accommodate varying loads and optimize resource utilization, our system employs a multi-faceted approach to scalability. This document outlines the key strategies used to ensure that the system can handle growth in demand without compromising on performance.</p>"},{"location":"scalability/#horizontal-scaling","title":"Horizontal Scaling","text":"<p>Horizontal scaling, also known as scaling out, involves adding more instances of the API servers to distribute the load evenly. This approach is particularly effective for handling an increase in user requests.</p> <ul> <li> <p>Stateless API Servers: Our API servers are designed to be stateless, which means they do not store any user data between requests. This design choice allows us to add or remove server instances without impacting the system's state or performance.</p> </li> <li> <p>Kubernetes Horizontal Node Scaling: We leverage on the Cloud Provider's Kubernetes environment to automatically scale the number of nodes based on resource utilization. This ensures that the system can handle varying loads efficiently.</p> </li> </ul>"},{"location":"scalability/#benefits-of-horizontal-scaling","title":"Benefits of Horizontal Scaling","text":"<ul> <li>Flexibility: Easily adjust capacity by adding or removing instances.</li> <li>Fault Tolerance: Reduced impact of a single instance failure on the overall system.</li> <li>Cost-Effectiveness: Pay only for the resources you need, when you need them.</li> </ul>"},{"location":"scalability/#auto-scaling","title":"Auto-Scaling","text":"<p>Auto-scaling encompasses both horizontal scaling strategies and applies them automatically in response to traffic patterns and system load.</p> <ul> <li>Burst Scaling: Our system is capable of burst scaling, which is a form of auto-scaling designed to handle sudden spikes in traffic. This ensures that the system remains responsive during unexpected surges in demand.</li> </ul>"},{"location":"scalability/#benefits-of-auto-scaling","title":"Benefits of Auto-Scaling","text":"<ul> <li>Responsiveness: Quickly adapts to changes in load, ensuring consistent performance.</li> <li>Cost Efficiency: Resources are scaled up only when needed, reducing unnecessary expenditure.</li> </ul>"},{"location":"testing/","title":"Testing","text":"<p>We have written comprehensive unit tests for the API server, covering a wide range of scenarios and edge cases. It includes the following:</p> <ul> <li>Test Cases: Detailed test cases for each API endpoint.</li> <li>Coverage: Ensuring high test coverage to validate the functionality of the API.</li> <li>Automation: Implementing automated testing to streamline the testing process.</li> <li>Continuous Integration: Integrating testing into the CI/CD pipeline for efficient development.</li> <li>Mocking: Using mocks to simulate external dependencies and ensure isolated testing.</li> <li>Performance Testing: Conducting performance tests to evaluate the API's responsiveness and scalability.</li> </ul>"},{"location":"api-usage/authentication/","title":"Authentication","text":"<p>To obtain and use API tokens:</p> <ol> <li>Log in to the CKAN platform</li> <li>Navigate to \"Profile\" &gt; \"AI/ML API Tokens\"</li> <li>Specify token name, scopes, and expiration</li> <li>Click \"Create New Token\"</li> <li>Copy the generated token (displayed only once)</li> <li>Use the token in API requests:</li> </ol> <pre><code>curl -X POST \\\n  -H \"Authorization: Bearer &lt;your_token_here&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"smiles\": \"c1ccccc1O\"}' \\\n  https://api.example.com/v1/ai/evaluate\n</code></pre>"},{"location":"api-usage/endpoints/","title":"Endpoints","text":"<p>This document provides comprehensive API documentation, ensuring developers have all the necessary information for successful integration.</p>"},{"location":"api-usage/endpoints/#openapi-swagger-specification","title":"OpenAPI (Swagger) Specification","text":"<p>Interactive documentation for all endpoints is available through our OpenAPI (Swagger) Specification. This allows for easy testing and exploration of the API capabilities. Access the interactive documentation here.</p>"},{"location":"api-usage/endpoints/#versioning","title":"Versioning","text":"<p>We use semantic versioning for our API to ensure backward compatibility and clear communication of changes. Each endpoint's version and deprecation schedules are documented. </p>"},{"location":"api-usage/endpoints/#detailed-error-messages","title":"Detailed Error Messages","text":"<p>Our API provides detailed error messages to help developers troubleshoot issues quickly.</p>"},{"location":"api-usage/endpoints/#health-check-endpoint","title":"Health Check Endpoint","text":"<p>A health check endpoint is available to monitor the status of the API server. This endpoint can be used to verify that the server is running and responsive.</p>"},{"location":"api-usage/error-handling/","title":"Error Handling","text":"<ul> <li>HTTP Status Codes: <ul> <li>Using appropriate status codes to indicate the outcome of API requests.</li> </ul> </li> <li>Error Messages: <ul> <li>Providing clear and informative error messages for better troubleshooting.</li> </ul> </li> <li>Error Response Format: <ul> <li>Consistent format for error responses to facilitate client-side handling.</li> </ul> </li> <li>Best Practices: <ul> <li>Guidelines for handling and troubleshooting errors effectively.</li> </ul> </li> <li>Logging: <ul> <li>Logging errors for monitoring and debugging purposes.</li> </ul> </li> <li>User-Friendly Messages: <ul> <li>Ensuring error messages are user-friendly and informative.</li> </ul> </li> <li>Documentation: <ul> <li>Documenting common errors and their resolutions for reference.</li> </ul> </li> <li>Testing: <ul> <li>Testing error scenarios to validate error handling mechanisms.</li> </ul> </li> </ul>"},{"location":"overview/data-flow/","title":"Data Flow","text":"<p>The data flow process involves several key steps, outlined below:</p> <ol> <li> <p>Client Request</p> <ul> <li>The client application sends an API request to the system. This request includes an authentication token and the necessary data or parameters for the API endpoint.</li> </ul> </li> <li> <p>Istio Service Mesh</p> <ul> <li>The request first passes through the Istio Service Mesh.</li> </ul> </li> <li> <p>Envoy Filter Interception</p> <ul> <li>The custom Envoy Filter, written in Go, intercepts the request and begins processing.</li> </ul> </li> <li> <p>Public Key Retrieval</p> <ul> <li>The Envoy Filter fetches and caches the public key from Keycloak, which will be used to verify the authentication token.</li> </ul> </li> <li> <p>Token Verification</p> <ul> <li>The Envoy Filter verifies the token's signature using the fetched public key. It also checks the token's validity, expiration date, and any other claims.</li> </ul> </li> <li> <p>Role and Permission Check</p> <ul> <li>After verifying the token, the Envoy Filter checks the user's roles and permissions encoded within the token.</li> </ul> </li> <li> <p>Revoked Token Check</p> <ul> <li>The Envoy Filter fetches and caches revoked tokens from the database, then checks if the token is revoked. If revoked, it responds with an unauthorized message to the client.</li> </ul> </li> <li> <p>Forward Valid Request</p> <ul> <li>If the token is valid and the user has the necessary roles and permissions, the Envoy Filter forwards the request to the AI/ML API Server.</li> </ul> </li> <li> <p>ML Model Interaction</p> <ul> <li>The API Server interacts with the appropriate machine learning (ML) model(s) based on the functionality requested.</li> </ul> </li> <li> <p>ML Model Processing</p> <ul> <li>The ML model(s) process the input data and generate the requested output, such as predictions, classifications, or analyses.</li> </ul> </li> <li> <p>API Response</p> <ul> <li>The API Server packages the output from the ML model(s) into an appropriate response format and sends it back to the client application through the secure communication channel.</li> </ul> </li> </ol>"},{"location":"overview/system-architecture/","title":"System Architecture","text":"<p>The AI/ML API Server is a system designed to provide a unified interface for accessing and utilizing various machine learning (ML) models developed by the consortium partners of the ALTERNATIVE project. The core component of the system is the API Server, which is built using Python, Flask, and Gunicorn.</p>"},{"location":"overview/system-architecture/#overview","title":"Overview","text":"<p>When a client application sends a request to the API Server, the request first goes through the Istio Service Mesh, which is responsible for secure communication, monitoring, and traffic management. The request is then intercepted by a custom Envoy Filter, implemented in Go, which handles token-based authentication and authorization by integrating with Keycloak, an identity and access management system.</p> <p>Keycloak manages user identities and access control policies, ensuring that only authorized users can access the API and its resources. The custom Envoy Filter validates the user's token and checks their permissions before allowing the request to proceed to the API Server.</p> <p>If the user is authenticated and authorized, the request is forwarded to the API Server, which interacts with the appropriate ML model(s) to perform the requested task, such as predictive analytics. The ML models are developed using frameworks like TensorFlow, PyTorch, R, and scikit-learn, and are provided by the ALTERNATIVE project participants.</p> <p>The API Server processes the request, obtains the necessary results from the ML model(s), and generates a response, which is then sent back to the client application through the same secure communication channel.</p> <p>The system also integrates with CKAN, a data management platform, which handles access token management. Users can create, renew, and revoke their API tokens through a user-friendly interface provided by CKAN. Revoked tokens are stored in a PostgreSQL database to ensure that they cannot be used for unauthorized access.</p> <p>The entire system is designed to be secure, scalable, and efficient. Security measures include HTTPS encryption, data encryption at rest and in transit, and role-based access control (RBAC) mechanisms. Scalability is achieved through the use of Docker for containerization and Kubernetes for container orchestration, allowing the system to scale up or down as needed to handle increased demand.</p> <p>Overall, the AI/ML API Server provides a centralized and secure way for client applications to access and utilize a variety of machine learning models, while ensuring proper authentication, authorization, and scalability.</p>"},{"location":"overview/system-architecture/#components","title":"Components","text":""},{"location":"overview/system-architecture/#aiml-api-server","title":"AI/ML API Server","text":"<ul> <li>Description: The AI/ML API server is the core component that exposes the REST API. It handles requests from clients, interfaces with machine learning models, and returns processed results. This server ensures efficient communication between the client applications and the underlying ML models.</li> <li>Responsibilities: <ul> <li>Handling incoming requests from various clients.</li> <li>Interacting with machine learning models to process data.</li> <li>Generating and returning responses based on model outputs.</li> </ul> </li> <li>Technologies: <ul> <li>Python: For implementing the server logic and interfacing with ML models.</li> <li>Flask: As the web framework for creating the RESTful API.</li> <li>Gunicorn: As the WSGI HTTP server for handling concurrent requests and ensuring high performance.</li> </ul> </li> </ul>"},{"location":"overview/system-architecture/#istio-service-mesh","title":"Istio Service Mesh","text":"<ul> <li>Description: The Istio Service Mesh is a robust infrastructure layer that provides a uniform approach to securing, connecting, and monitoring microservices. It significantly enhances the security, reliability, and observability of microservices by offering advanced features like mutual TLS authentication, traffic control, and telemetry collection.</li> <li>Responsibilities: <ul> <li>Security: Implementing strong security policies, including mutual TLS and fine-grained access controls.</li> <li>Monitoring: Collecting and analyzing telemetry data to provide deep insights into service performance and health.</li> <li>Traffic Management: Managing traffic flow between services, including load balancing, traffic splitting, and fault injection to ensure smooth and reliable service interactions.</li> </ul> </li> <li>Technologies: <ul> <li>Istio: For service mesh management, providing a comprehensive suite of features to control and observe service interactions.</li> <li>Envoy: As the high-performance proxy that intercepts and routes all traffic within the service mesh, enabling sophisticated traffic management and security enforcement.</li> </ul> </li> </ul>"},{"location":"overview/system-architecture/#custom-envoy-filter","title":"Custom Envoy Filter","text":"<ul> <li>Description: The custom Envoy filter, implemented in Go, provides robust token-based authentication and authorization. This filter seamlessly integrates with Keycloak to manage identity and access control, ensuring secure and authorized communication between services.</li> <li>Responsibilities: <ul> <li>Authentication: Verifying the identity of users or services through token validation, ensuring that only authenticated entities can access the services.</li> <li>Authorization: Enforcing access control policies by checking the permissions associated with each token, thus ensuring that only authorized actions are allowed.</li> </ul> </li> <li>Technologies: <ul> <li>Go: For developing the filter, taking advantage of its concurrency features and performance.</li> <li>Envoy: As the service proxy, which the filter extends to handle custom authentication and authorization logic.</li> <li>Keycloak: For identity and access management, providing a centralized platform for authentication and authorization services.</li> </ul> </li> </ul>"},{"location":"overview/system-architecture/#keycloak-identity-and-access-management","title":"Keycloak Identity and Access Management","text":"<ul> <li>Description: An open-source system for managing authentication, authorization, and user management services.</li> <li>Responsibilities: Identity management, access control.</li> <li>Technologies: Keycloak.</li> </ul>"},{"location":"overview/system-architecture/#ckan-data-management-platform","title":"CKAN Data Management Platform","text":"<ul> <li>Description: CKAN is a powerful data management platform designed for publishing, sharing, and accessing data. It is integrated with the API server to handle access tokens and manage user permissions, ensuring secure and efficient data access and distribution.</li> <li>Responsibilities: <ul> <li>Data Publishing: Enabling organizations to publish datasets, making them accessible to the public or specific user groups.</li> <li>Data Sharing: Facilitating the sharing of data across different users and systems, promoting data reuse and collaboration.</li> <li>Token Management: Handling the issuance, validation, and revocation of access tokens to secure API interactions.</li> <li>User Permissions Management: Managing user roles and permissions to control access to data and functionalities within the platform.</li> </ul> </li> <li>Technologies: <ul> <li>CKAN: The core technology provides a comprehensive suite of features for data management, including a web-based interface for dataset management, an API for programmatic access, and extensions for customization.</li> </ul> </li> </ul>"},{"location":"overview/system-architecture/#docker","title":"Docker","text":"<ul> <li>Description: Docker is a leading containerization platform that packages applications and their dependencies into isolated environments called containers. This ensures consistency and reliability across various deployment platforms, from development to production. It encapsulates the AI/ML API server along with its dependencies into a container, ensuring that it can run consistently across different environments. This containerization simplifies the deployment process and enhances the scalability and manageability of the server.</li> <li>Responsibilities: <ul> <li>Containerization: Encapsulating applications and their dependencies into lightweight, portable containers that can run consistently on any infrastructure.</li> <li>Deployment: Simplifying the deployment process by allowing applications to be deployed in any environment without compatibility issues, enhancing scalability and manageability.</li> </ul> </li> </ul>"},{"location":"overview/system-architecture/#kubernetes","title":"Kubernetes","text":"<ul> <li>Description: Kubernetes is a powerful container orchestration platform designed to automate the deployment, scaling, and management of containerized applications. It simplifies complex operations, ensuring applications run smoothly and efficiently across diverse environments. It manages the deployment, scaling, and lifecycle of Docker containers that host the AI/ML API server. By automating these processes, Kubernetes ensures the AI/ML API server can handle varying loads, recover from failures, and maintain high availability.</li> <li>Responsibilities: <ul> <li>Orchestration: Managing the deployment, configuration, and life cycle of containers, ensuring they operate seamlessly together.</li> <li>Scaling: Automatically adjusting the number of running containers based on demand, optimizing resource utilization and application performance.</li> <li>Self-Healing: Monitoring container health and restarting failed containers to maintain high availability.</li> <li>Load Balancing: Distributing network traffic evenly across containers to ensure reliable and efficient application performance.</li> </ul> </li> </ul>"},{"location":"overview/system-architecture/#aiml-models","title":"AI/ML Models","text":"<ul> <li>Description: The AI/ML models are diverse machine learning models contributed by participants in the ALTERNATIVE project. These models are utilized for a range of tasks, including image recognition, predictive analytics, natural language processing, and more, to provide intelligent and automated solutions.</li> <li>Responsibilities: <ul> <li>Prediction: Generating predictions based on input data, such as identifying objects in images or forecasting future trends.</li> <li>Inference: Performing real-time inference to provide instant insights and responses in various applications.</li> <li>Learning: Continuously learning and improving from new data to enhance accuracy and performance over time.</li> </ul> </li> <li>Technologies: <ul> <li>TensorFlow: A comprehensive open-source platform for building and deploying machine learning models.</li> <li>PyTorch: A flexible and efficient deep learning framework known for its dynamic computational graph and ease of use.</li> <li>scikit-learn: A robust library for classical machine learning algorithms, offering tools for data preprocessing, model training, and evaluation.</li> </ul> </li> </ul>"},{"location":"overview/system-architecture/#postgresql-database","title":"PostgreSQL Database","text":"<ul> <li>Description: PostgreSQL is a powerful, open-source relational database management system (RDBMS) used for storing and managing a wide range of data, including user information, access tokens, and other critical data. Known for its robustness and flexibility, PostgreSQL ensures data integrity and supports advanced data types and performance optimization.</li> <li>Responsibilities: <ul> <li>Data Storage: Efficiently storing and retrieving user data, access tokens, and other related information.</li> <li>Token Management: Maintaining a record of revoked tokens to ensure secure access control and prevent unauthorized access.</li> <li>Data Integrity: Enforcing constraints and transactions to ensure the accuracy and consistency of stored data.</li> </ul> </li> <li>Technologies: <ul> <li>PostgreSQL: The core technology provides advanced features such as ACID compliance, full-text search, and support for JSON and other complex data types, making it suitable for a variety of applications and data management needs.</li> </ul> </li> </ul>"},{"location":"security/authentication-and-authorization/","title":"Authentication and Authorization","text":""},{"location":"security/authentication-and-authorization/#overview","title":"Overview","text":"<p>This document outlines the authentication and authorization mechanisms implemented in our system. It covers the token-based security mechanism using an Envoy filter, integration with Keycloak for identity and access management, and the application of Role-based Access Control (RBAC) for fine-grained permissions.</p>"},{"location":"security/authentication-and-authorization/#token-based-security-mechanism","title":"Token-based Security Mechanism","text":"<p>The system employs a robust token-based security mechanism integrated within the Istio service mesh. This approach ensures that only authenticated and authorized requests can access protected services.</p>"},{"location":"security/authentication-and-authorization/#implementation-details","title":"Implementation Details","text":"<ul> <li>Envoy Filter: A custom HTTP filter deployed as a sidecar container alongside the service it secures. It performs the following functions:</li> <li>Request Interception: All incoming requests are intercepted for validation.</li> <li>Token Validation: Validates the JWT token's signature and checks the token ID against a revocation list stored in a PostgreSQL database.</li> <li>Caching: To improve performance and reduce database queries, caching is used for the token's revocation status and the public key for signature verification.</li> </ul>"},{"location":"security/authentication-and-authorization/#verification-process","title":"Verification Process","text":"<ol> <li>Extract Token: The token is extracted from the request header.</li> <li>Validate Structure and Signature: Checks if the token structure is valid and verifies the signature.</li> <li>Check Expiration: Ensures the token has not expired.</li> <li>Verify Claims: Verifies the issuer and audience claims.</li> <li>Revocation List Check: Checks the token ID against a revocation list.</li> </ol>"},{"location":"security/authentication-and-authorization/#keycloak-integration","title":"Keycloak Integration","text":"<p>Keycloak serves as the central identity and access management system, offering features like OAuth 2.0, OpenID Connect support, and multi-factor authentication.</p>"},{"location":"security/authentication-and-authorization/#integration-steps","title":"Integration Steps","text":"<ol> <li>Realm Configuration: Set up a Keycloak realm specific to the API.</li> <li>Client Application Setup: Register the client application in Keycloak.</li> <li>Roles and Permissions: Define roles and permissions for access control.</li> <li>Token Configuration: Configure token settings, including lifespan and signature algorithm.</li> <li>Library Integration: Integrate Keycloak libraries with the Envoy filter for seamless authentication and authorization.</li> </ol>"},{"location":"security/authentication-and-authorization/#access-control","title":"Access Control","text":"<p>Role-based Access Control (RBAC) is implemented to provide fine-grained access control to API endpoints. This section could be expanded with examples of role definitions and how they are applied to endpoints.</p>"},{"location":"security/authentication-and-authorization/#best-practices","title":"Best Practices","text":"<ul> <li>Regularly Update Roles: Ensure roles and permissions are regularly reviewed and updated to reflect changes in access requirements.</li> </ul>"},{"location":"security/authentication-and-authorization/#common-issues-and-troubleshooting","title":"Common Issues and Troubleshooting","text":"<ul> <li>Token Validation Failure: Ensure the token has not expired and the signature matches the public key.</li> <li>Access Denied: Verify the user's roles and permissions align with the requested resource's access control policies.</li> <li>Performance Issues: Check the caching mechanism for token validation and revocation status to ensure it is functioning correctly.</li> </ul>"},{"location":"security/encryption/","title":"Encryption","text":"<p>The implementation of the Alternative Envoy filter within an Istio service mesh is a cornerstone for ensuring robust encryption practices, thereby guaranteeing data security across the network. This document outlines the encryption strategies employed to protect data both in transit and at rest, emphasizing the importance of these measures in maintaining data integrity and confidentiality within a distributed system.</p>"},{"location":"security/encryption/#secure-data-transmission-with-https","title":"Secure Data Transmission with HTTPS","text":"<p>HTTPS is utilized as the primary means for secure data transmission. By leveraging Transport Layer Security (TLS), HTTPS provides a secure channel over which data can be transmitted between clients and services. This prevents data interception and tampering by encrypting the data during transit.</p>"},{"location":"security/encryption/#benefits-of-https","title":"Benefits of HTTPS:","text":"<ul> <li>Encryption: Ensures that data exchanged between the client and server is encrypted, protecting against eavesdropping and man-in-the-middle attacks.</li> <li>Data Integrity: Guarantees that the data sent is not altered or corrupted during transfer.</li> <li>Authentication: Verifies that the users are communicating with the intended website, building trust.</li> </ul>"},{"location":"security/encryption/#encryption-of-sensitive-data","title":"Encryption of Sensitive Data","text":"<p>Sensitive information, including JWT tokens and revocation lists, is encrypted not only in transit but also at rest. This dual-layer encryption strategy provides comprehensive protection against unauthorized access and potential data breaches.</p>"},{"location":"security/encryption/#data-in-transit","title":"Data in Transit:","text":"<ul> <li>End-to-End Encryption: For sensitive payloads, end-to-end encryption is employed, ensuring that data is encrypted from the source all the way to the destination without being decrypted at intermediary points.</li> </ul>"},{"location":"security/encryption/#encryption-algorithms-and-key-management","title":"Encryption Algorithms and Key Management","text":"<p>Choosing the right encryption algorithms and managing encryption keys effectively are critical aspects of a robust encryption strategy.</p> <ul> <li>Algorithms: AES (Advanced Encryption Standard) for data at rest and TLS 1.3 for data in transit are recommended due to their strong security features and widespread support.</li> <li>Key Management: Securely managing the keys involves generating, storing, rotating, and retiring encryption keys in a secure manner. A centralized key management system can help automate these processes, reducing the risk of human error.</li> </ul>"},{"location":"token-management/ckan-integration/","title":"Token Management with CKAN","text":"<p>This document outlines the integration of CKAN with Keycloak for advanced token management capabilities, focusing on both the backend and frontend enhancements to facilitate secure and efficient token lifecycle management.</p>"},{"location":"token-management/ckan-integration/#integration-with-ckan","title":"Integration with CKAN","text":"<p>The integration is achieved through a combination of custom development and configuration, ensuring a seamless experience for both administrators and end-users.</p>"},{"location":"token-management/ckan-integration/#custom-ckan-extension","title":"Custom CKAN Extension","text":"<p>A custom CKAN extension has been developed to bridge CKAN with Keycloak, enabling advanced token management features. This extension allows for:</p> <ul> <li>Seamless synchronization between CKAN user accounts and Keycloak authentication.</li> <li>Enhanced security measures through Keycloak's robust authentication mechanisms.</li> </ul>"},{"location":"token-management/ckan-integration/#database-schema","title":"Database Schema","text":"<p>The CKAN database schema has been extended to support the storage of token metadata, including:</p> <ul> <li>Token identifiers and associated user accounts.</li> <li>Token scopes, expiration dates, and creation timestamps.</li> </ul>"},{"location":"token-management/ckan-integration/#user-interface-enhancements","title":"User Interface Enhancements","text":"<p>To improve the user experience, we have introduced new UI components focused on token management within the CKAN platform.</p>"},{"location":"token-management/ckan-integration/#new-ui-components","title":"New UI Components","text":"<ul> <li>Token Management Dashboard: Integrated into the user profile, this dashboard provides a comprehensive overview of a user's tokens, including creation dates, scopes, and expiration dates.</li> <li>Token Creation Wizard: A user-friendly interface that guides users through the process of creating new tokens, with options to customize scopes and set expiration dates.</li> <li>Token Revocation and Renewal Interface: Easy-to-use interface that allow users to revoke or renew their tokens.</li> </ul>"},{"location":"token-management/ckan-integration/#accessibility","title":"Accessibility","text":"<p>In line with our commitment to inclusivity, the new UI components are designed to be accessible to all users, ensuring a seamless experience regardless of individual needs or preferences.</p>"},{"location":"token-management/token-lifecycle/","title":"Token Lifecycle Management","text":""},{"location":"token-management/token-lifecycle/#obtaining-tokens","title":"Obtaining Tokens","text":"<ol> <li>User initiates token creation through CKAN interface</li> <li>CKAN validates user permissions</li> <li>Token request sent to Keycloak with specified parameters</li> <li>Keycloak generates JWT with appropriate claims</li> <li>Token metadata stored in CKAN database</li> <li>Token presented to user (displayed only once for security)</li> </ol>"},{"location":"token-management/token-lifecycle/#revoking-tokens","title":"Revoking Tokens","text":"<ol> <li>The user revokes an existing access token through the CKAN platform.</li> <li>CKAN adds the revoked token to a list of invalid tokens stored in the PostgreSQL database.</li> <li>CKAN sends a request to the Envoy Filter to refresh the cache of revoked tokens.</li> </ol>"},{"location":"token-management/token-lifecycle/#expiration-policies","title":"Expiration Policies","text":"<ul> <li>Default token lifespan: 6 months (configurable)</li> </ul>"}]}